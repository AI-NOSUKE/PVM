name: PVM CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: pvm-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      HF_HOME: ${{ github.runner_temp }}/.hf_cache
      HF_HUB_ENABLE_HF_TRANSFER: "1"
      PIP_NO_INPUT: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Cache HF/Torch
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HF_HOME }}
            ~/.cache/torch
          key: ${{ runner.os }}-hf-${{ hashFiles('requirements.txt') }}

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install . || true

      - name: Show environment
        shell: bash
        run: |
          python --version
          pip list | sed -n '1,60p'
          echo "HF_HOME=$HF_HOME"

      - name: Flow 1 - normal then lock
        shell: bash
        run: |
          set -eux
          python PVM.py examples/sample_texts.csv --output_dir=run1
          python PVM.py examples/sample_texts.csv --output_dir=run1_lock --lock_dir=run1

      - name: Flow 2 - normal then unlock
        shell: bash
        run: |
          set -eux
          python PVM.py examples/sample_texts.csv --output_dir=run2
          python PVM.py examples/sample_texts.csv --output_dir=run2_unlock

      - name: Flow 3 - candidates -> plan -> lock
        shell: bash
        run: |
          set -eux
          python PVM.py examples/sample_texts.csv --output_dir=candidates --candidates
          python PVM.py examples/sample_texts.csv --output_dir=plan3 --use_plan=candidates/plan3.json
          python PVM.py examples/sample_texts.csv --output_dir=plan3_lock --lock_dir=plan3

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pvm-outputs
          path: |
            run1
            run1_lock
            run2
            run2_unlock
            candidates
            plan3
            plan3_lock
